using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;


public class TemplateManager
{
	
	private TemplateManager()
	{
		this.m_templates = new Dictionary<string, List<ShopEntry>>();
		this.LoadContentFromFile();
	}

	
	
	public static TemplateManager Instance
	{
		get
		{
			object obj = TemplateManager.padlock;
			TemplateManager result;
			lock (obj)
			{
				if (TemplateManager.instance == null)
				{
					TemplateManager.instance = new TemplateManager();
				}
				result = TemplateManager.instance;
			}
			return result;
		}
	}

	
	public void AddTemplate(string name, List<ShopEntry> list)
	{
		List<ShopEntry> list2 = new List<ShopEntry>();
		list2.AddRange(list);
		this.m_templates.Add(name, list2);
		this.SaveContentToFile();
	}

	
	public void RemoveTemplate(string name)
	{
		this.m_templates.Remove(name);
		this.SaveContentToFile();
	}

	
	public void GetTemplate(string name, out List<ShopEntry> list)
	{
		List<ShopEntry> list2;
		this.m_templates.TryGetValue(name, out list2);
		list = list2;
	}

	
	public Dictionary<string, List<ShopEntry>> GetAllTemplates()
	{
		return this.m_templates;
	}

	
	private void SaveContentToFile()
	{
		IFormatter formatter = new BinaryFormatter();
		Stream stream = new FileStream("shoppingTemplates.bin", FileMode.Create, FileAccess.Write, FileShare.None);
		formatter.Serialize(stream, this.m_templates);
		stream.Close();
	}

	
	private void LoadContentFromFile()
	{
		if (File.Exists("shoppingTemplates.bin"))
		{
			IFormatter formatter = new BinaryFormatter();
			Stream stream = new FileStream("shoppingTemplates.bin", FileMode.OpenOrCreate, FileAccess.Read, FileShare.None);
			this.m_templates = (Dictionary<string, List<ShopEntry>>)formatter.Deserialize(stream);
			stream.Close();
		}
	}

	
	private static TemplateManager instance = null;

	
	private static readonly object padlock = new object();

	
	private Dictionary<string, List<ShopEntry>> m_templates;
}
