using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using I2.Loc;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

// Token: 0x020003D6 RID: 982
public class Shop : MonoBehaviour, IShopApp
{
	// Token: 0x0600231B RID: 8987
	public void AddItem(ShopEntry entry)
	{
		if (entry.m_part.IsOneTimePurchase() && this.m_trolley.Any((ShopEntry x) => x.m_part.m_id == entry.m_part.m_id))
		{
			return;
		}
		this.m_trolley.Add(entry);
		this.UpdateTrolley();
	}

	// Token: 0x0600231C RID: 8988
	public void RemoveItem(ShopEntry part)
	{
		this.m_trolley.Remove(part);
		this.UpdateTrolley();
		if (this.m_trolley.Count((ShopEntry x) => x == part) == 0)
		{
			this.OnCheckout();
		}
	}

	// Token: 0x0600231D RID: 8989
	private void Start()
	{
		this.AddCategory(ScriptLocalization.ShopApp.SEARCH_RESULTS, PartDesc.ShopCategory.All);
		foreach (PartDesc.ShopCategory type in this.m_shopCategories)
		{
			this.AddCategory(string.Empty, type);
		}
		if (this.m_delivery == null)
		{
			this.m_delivery = CareerConstants.s_delivery2;
		}
		this.m_sortBy.AddOptions(Enumerable.Range(0, 3).Select(delegate(int x)
		{
			string str = "ShopApp/";
			Shop.SortBy sortBy = (Shop.SortBy)x;
			return (str + sortBy.ToString()).Localized();
		}).ToList<string>());
		this.m_sortBy.onValueChanged.AddListener(delegate(int x)
		{
			this.ConstructItems();
		});
		this.m_filter.onValueChanged.AddListener(delegate(int x)
		{
			this.ConstructItems();
		});
		this.m_searchInResults.onValueChanged.AddListener(delegate(string x)
		{
			this.ConstructItems();
		});
		this.m_trolley = CareerStatus.Get().GetShopTrolley();
		this.UpdateTrolley();
		this.UpdateCost();
		this.m_searchStore.onEndEdit.AddListener(new UnityAction<string>(this.OnSearch));
		this.m_searchButton.onClick.AddListener(delegate()
		{
			this.OnSearch(this.m_searchStore.text);
		});
		CareerStatus.s_onStockChange += this.OnStockChange;
		this.ShowLandingPage();
		this.m_scrollItemDefaultSize = this.m_itemList.m_itemList.content.GetComponent<GridLayoutGroup>().cellSize.y;
	}

	// Token: 0x0600231E RID: 8990
	private void OnDestroy()
	{
		CareerStatus.s_onStockChange -= this.OnStockChange;
	}

	// Token: 0x0600231F RID: 8991
	private void AddCategory(string name, PartDesc.ShopCategory type)
	{
		if (name == string.Empty)
		{
			name = ("ShopApp/" + type).Localized();
		}
		UnityEngine.Object.Instantiate<ShopCategory>(this.m_categoryPrefab, this.m_categories).Init(name, type, string.Empty);
	}

	// Token: 0x06002320 RID: 8992
	private void Update()
	{
	}

	// Token: 0x06002321 RID: 8993
	public IEnumerable<ShopEntry> GetPartsForSale()
	{
		if (this.m_partsForSale.Count == 0)
		{
			foreach (PartDesc part in PartsDatabase.GetAllParts())
			{
				this.m_partsForSale.Add(new ShopEntry(part));
			}
		}
		return this.m_partsForSale;
	}

	// Token: 0x06002322 RID: 8994
	public void OnSelectCategory(ShopCategory cat)
	{
		if (this.m_type != cat.GetPartType())
		{
			this.m_currentFilters.Clear();
		}
		this.m_type = cat.GetPartType();
		this.m_manufacturer = cat.GetManufacturer();
		this.ConstructItems();
		for (int i = 0; i < this.m_categories.childCount; i++)
		{
			ShopCategory component = this.m_categories.GetChild(i).GetComponent<ShopCategory>();
			component.SetSelected(component == cat || (component.GetManufacturer() == string.Empty && component.GetPartType() == cat.GetPartType()));
		}
	}

	// Token: 0x06002323 RID: 8995
	public void OnSelectCategory(PartDesc.ShopCategory cat)
	{
		this.m_type = cat;
		this.ConstructItems();
		for (int i = 0; i < this.m_categories.childCount; i++)
		{
			ShopCategory component = this.m_categories.GetChild(i).GetComponent<ShopCategory>();
			component.SetSelected(component.GetManufacturer() == string.Empty && component.GetPartType() == cat);
		}
	}

	// Token: 0x06002324 RID: 8996
	public void ContractAllCategories()
	{
		for (int i = 0; i < this.m_categories.childCount; i++)
		{
			ShopCategory component = this.m_categories.GetChild(i).GetComponent<ShopCategory>();
			component.Contract();
			component.SetSelected(false);
		}
	}

	// Token: 0x06002325 RID: 8997
	private void ClearItems()
	{
		this.m_itemList.Clear();
		this.m_filter.ClearOptions();
		this.m_currentFilters.Clear();
		foreach (Component component in this.m_rows)
		{
			UnityEngine.Object.Destroy(component.gameObject);
		}
		this.m_rows.Clear();
		this.m_finalRow = null;
		this.m_deliveryRow = null;
	}

	// Token: 0x06002326 RID: 8998
	private void ConstructItems()
	{
		if (this.m_suppressConstruct)
		{
			return;
		}
		this.m_suppressConstruct = true;
		IEnumerable<ShopEntry> enumerable = this.GetPartsForSale();
		this.SetLocation(this.m_type.ToString());
		int value = this.m_sortBy.value;
		if (value != 1)
		{
			if (value == 2)
			{
				enumerable = from x in enumerable
				orderby x.m_cost descending
				select x;
			}
		}
		else
		{
			enumerable = from x in enumerable
			orderby x.m_cost
			select x;
		}
		List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>();
		list.Add(new KeyValuePair<string, string>(string.Empty, string.Empty));
		List<string> list2 = new List<string>();
		if (this.m_filter.value < this.m_currentFilters.Count)
		{
			this.m_currentFilter = this.m_currentFilters[this.m_filter.value];
		}
		else
		{
			this.m_currentFilter = list[0];
		}
		this.m_itemList.m_itemList.content.GetComponent<GridLayoutGroup>().cellSize = this.m_itemList.m_itemList.content.GetComponent<GridLayoutGroup>().cellSize.WithY((this.m_type != PartDesc.ShopCategory.Cables) ? this.m_scrollItemDefaultSize : this.m_cablesItemHeight);
		this.ClearItems();
		foreach (ShopEntry shopEntry in enumerable)
		{
			if (this.ShowItem(shopEntry.m_part))
			{
				if (this.FilterIncludesItem(shopEntry.m_part))
				{
					this.m_itemList.Add(shopEntry);
				}
				list2.Clear();
				shopEntry.m_part.GetShopProps(list2);
				for (int i = 1; i < list2.Count; i += 2)
				{
					list.Add(new KeyValuePair<string, string>(list2[i - 1], list2[i]));
				}
			}
		}
		this.m_currentFilters = list.Distinct<KeyValuePair<string, string>>().OrderBy(delegate(KeyValuePair<string, string> x)
		{
			KeyValuePair<string, string> keyValuePair = x;
			return keyValuePair.Value;
		}).OrderBy(delegate(KeyValuePair<string, string> x)
		{
			KeyValuePair<string, string> keyValuePair = x;
			return keyValuePair.Key;
		}).ToList<KeyValuePair<string, string>>();
		List<string> list3 = this.m_currentFilters.Select(delegate(KeyValuePair<string, string> x)
		{
			KeyValuePair<string, string> keyValuePair = x;
			string key = keyValuePair.Key;
			string str = ": ";
			keyValuePair = x;
			return key + str + keyValuePair.Value;
		}).ToList<string>();
		list3[0] = string.Empty;
		this.m_filter.AddOptions(list3);
		int num = this.m_currentFilters.IndexOf(this.m_currentFilter);
		this.m_filter.value = ((num < 0) ? 0 : num);
		this.ShowGameObject(this.m_itemList.gameObject);
		this.m_suppressConstruct = false;
	}

	// Token: 0x06002327 RID: 8999
	private bool ShowItem(PartDesc part)
	{
		return (this.m_type == PartDesc.ShopCategory.All || part.m_shopCategory == this.m_type) && (this.m_type != PartDesc.ShopCategory.All || (!string.IsNullOrEmpty(this.m_searchString) && part.m_uiName.IndexOf(this.m_searchString, 0, StringComparison.CurrentCultureIgnoreCase) != -1)) && (!(this.m_manufacturer != string.Empty) || !(part.m_manufacturer != this.m_manufacturer)) && CareerStatus.Get().IsAvailableInShop(part) && (!(this.m_searchInResults.text != string.Empty) || part.m_uiName.IndexOf(this.m_searchInResults.text, 0, StringComparison.CurrentCultureIgnoreCase) != -1);
	}

	// Token: 0x06002328 RID: 9000
	private bool FilterIncludesItem(PartDesc part)
	{
		if (!string.IsNullOrEmpty(this.m_currentFilter.Key))
		{
			List<string> list = new List<string>();
			part.GetShopProps(list);
			bool flag = false;
			for (int i = 1; i < list.Count; i += 2)
			{
				if (list[i - 1] == this.m_currentFilter.Key && list[i] == this.m_currentFilter.Value)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06002329 RID: 9001
	private void ShowMessage(string message)
	{
		this.m_message.text = message;
		this.ShowGameObject(this.m_message.gameObject);
		this.ContractAllCategories();
	}

	// Token: 0x0600232A RID: 9002
	public void ShowItemPage(ShopEntry part)
	{
		this.m_returnToCheckout = this.m_checkoutList.gameObject.activeSelf;
		this.ShowGameObject(this.m_shopItemPage.gameObject);
		this.m_shopItemPage.Init(part);
	}

	// Token: 0x0600232B RID: 9003
	public void ShowItemList()
	{
		this.ShowGameObject(this.m_itemList.gameObject);
	}

	// Token: 0x0600232C RID: 9004
	private void ShowGameObject(GameObject go)
	{
		this.m_message.gameObject.SetActive(go == this.m_message.gameObject);
		this.m_checkoutList.gameObject.SetActive(go == this.m_checkoutList.gameObject);
		this.m_itemList.gameObject.SetActive(go == this.m_itemList.gameObject);
		this.m_filterOptions.SetActive(go == this.m_itemList.gameObject);
		this.m_shopItemPage.gameObject.SetActive(go == this.m_shopItemPage.gameObject);
		this.m_landingPage.SetActive(go == this.m_landingPage);
	}

	// Token: 0x0600232D RID: 9005
	public void ShowLandingPage()
	{
		this.ShowGameObject(this.m_landingPage);
		IEnumerator enumerator = this.m_landingCategories.content.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				object obj = enumerator.Current;
				UnityEngine.Object.Destroy(((Transform)obj).gameObject);
			}
		}
		finally
		{
			IDisposable disposable;
			if ((disposable = (enumerator as IDisposable)) != null)
			{
				disposable.Dispose();
			}
		}
		int num = 4;
		float num2 = 0f;
		for (int i = 0; i < this.m_shopCategories.Length; i++)
		{
			RectTransform rectTransform = this.AddLandingCategory(this.m_shopCategories[i]);
			int num3 = i / num;
			int num4 = i - num3 * num;
			num2 = Mathf.Max(num2, rectTransform.rect.height);
			float num5 = (float)Math.Min(this.m_shopCategories.Length - num3 * num, num);
			float num6 = ((float)num - num5) / 2f / (float)num;
			float num7 = -(float)num3 * 10f;
			rectTransform.anchorMin = new Vector2(num6 + (float)num4 / (float)num, 1f);
			rectTransform.anchorMax = new Vector2(num6 + ((float)num4 + 1f) / (float)num, 1f);
			rectTransform.offsetMin = new Vector2(5f, num7 - (float)(num3 + 1) * num2);
			rectTransform.offsetMax = new Vector2(-5f, num7 - (float)num3 * num2);
		}
		int num8 = (this.m_shopCategories.Length - 1) / num;
		this.m_landingCategories.content.offsetMin = this.m_landingCategories.content.offsetMin.WithY(-(float)(num8 + 1) * (num2 + 10f));
		this.SetLocation(string.Empty);
		this.m_categories.GetChild(0).GetComponent<Button>().interactable = false;
	}

	// Token: 0x0600232E RID: 9006
	private RectTransform AddLandingCategory(PartDesc.ShopCategory category)
	{
		ShopLandingCategory shopLandingCategory = UnityEngine.Object.Instantiate<ShopLandingCategory>(this.m_landingCategoryPrefab, this.m_landingCategories.content);
		shopLandingCategory.Init(("ShopApp/" + category).Localized(), (from x in PartsDatabase.GetAllParts()
		where x.m_shopCategory == category
		orderby x.GetQuality() descending
		select x).FirstOrDefault<PartDesc>());
		return shopLandingCategory.transform as RectTransform;
	}

	// Token: 0x0600232F RID: 9007
	private void SetLocation(string place)
	{
		string text = ScriptLocalization.ShopApp.HOME;
		if (!this.m_landingPage.activeSelf)
		{
			if (place == string.Empty)
			{
				text = text + " / <b>" + string.Format(ScriptLocalization.ShopApp.RESULTS_FOR_STRING, this.m_searchString) + "</b>";
			}
			else
			{
				text = text + " / <b>" + ("ShopApp/" + place).Localized() + "</b>";
			}
		}
		this.m_location.text = text;
	}

	// Token: 0x06002330 RID: 9008
	private void ConstructCheckout()
	{
		this.ContractAllCategories();
		Tutorial.OnCheckout(this.m_trolley.Count);
		this.SetLocation("Checkout");
		Dictionary<ShopEntry, int> dictionary = new Dictionary<ShopEntry, int>();
		bool flag = false;
		foreach (ShopEntry shopEntry in this.m_trolley)
		{
			if (!shopEntry.m_part.ImmediateDelivery())
			{
				flag = true;
			}
			if (dictionary.ContainsKey(shopEntry))
			{
				Dictionary<ShopEntry, int> dictionary2;
				ShopEntry key;
				(dictionary2 = dictionary)[key = shopEntry] = dictionary2[key] + 1;
			}
			else
			{
				dictionary[shopEntry] = 1;
			}
		}
		this.ClearItems();
		foreach (KeyValuePair<ShopEntry, int> keyValuePair in dictionary)
		{
			CheckoutRow checkoutRow = UnityEngine.Object.Instantiate<CheckoutRow>(this.m_checkoutRowPrefab, this.m_checkoutList.content.transform);
			checkoutRow.Init(keyValuePair.Key, keyValuePair.Value);
			this.m_rows.Add(checkoutRow);
		}
		if (flag)
		{
			this.m_deliveryRow = UnityEngine.Object.Instantiate<CheckoutDeliveryRow>(this.m_checkoutDeliveryRowPrefab, this.m_checkoutList.content.transform);
			this.m_rows.Add(this.m_deliveryRow);
		}
		this.m_finalRow = UnityEngine.Object.Instantiate<CheckoutFinalRow>(this.m_checkoutFinalRowPrefab, this.m_checkoutList.content.transform);
		this.m_rows.Add(this.m_finalRow);
		this.UpdateCost();
		this.ShowGameObject(this.m_checkoutList.gameObject);
	}

	// Token: 0x06002331 RID: 9009
	public void OnCheckout()
	{
		this.ConstructCheckout();
		this.UpdateCost();
	}

	// Token: 0x06002332 RID: 9010
	private void UpdateCost()
	{
		this.m_cost = this.m_trolley.Sum((ShopEntry x) => x.m_cost);
		if (this.m_trolley.Any((ShopEntry x) => !x.m_part.IsOneTimePurchase()))
		{
			this.m_cost += this.m_delivery.m_cost;
		}
		string text = this.m_cost.ToCash();
		this.m_cartPrice.text = ((this.m_trolley.Count <= 0) ? string.Empty : text);
		if (this.m_deliveryRow)
		{
			this.m_deliveryRow.SetDeliveryOption(this.m_delivery);
		}
		if (this.m_finalRow)
		{
			int cash = CareerStatus.Get().GetCash();
			this.m_finalRow.Set(text, cash.ToCash(), this.m_trolley.Count > 0);
		}
	}

	// Token: 0x06002333 RID: 9011
	public void OnSelectDelivery(DeliveryOption option)
	{
		this.m_delivery = option;
		this.UpdateCost();
	}

	// Token: 0x06002334 RID: 9012
	public void OnSearch(string value)
	{
		if (value != string.Empty)
		{
			this.m_searchString = value;
			this.m_type = PartDesc.ShopCategory.All;
			this.m_manufacturer = string.Empty;
			if (this.GetPartsForSale().Count((ShopEntry x) => this.ShowItem(x.m_part)) == 0)
			{
				this.ShowMessage(string.Format(ScriptLocalization.ShopApp.NOTHING_FOUND, value));
				return;
			}
			this.m_categories.GetChild(0).GetComponent<Button>().interactable = true;
			this.ShowGameObject(this.m_itemList.gameObject);
			this.OnSelectCategory(this.m_categories.GetChild(0).GetComponent<ShopCategory>());
		}
	}

	// Token: 0x06002335 RID: 9013
	public void UpdateTrolley()
	{
		this.m_trolleyContents.text = string.Format("{0} ({1})", ScriptLocalization.ShopApp.VIEW_CART, (this.m_trolley.Count <= 0) ? "0" : this.m_trolley.Count.ToString());
		this.UpdateCost();
	}

	// Token: 0x06002336 RID: 9014
	public void OnBuy()
	{
		if (CareerStatus.Get().SpendCash(this.m_cost, false))
		{
			int num = UnityEngine.Random.Range(this.m_delivery.m_minWorkingDays, this.m_delivery.m_maxWorkingDays + 1);
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			foreach (ShopEntry shopEntry in this.m_trolley)
			{
				for (int i = 0; i < shopEntry.m_part.m_numberPerPurchase; i++)
				{
					if (shopEntry.m_part.ImmediateDelivery())
					{
						CareerStatus.Get().AddItemToInventory(new PartInstance(shopEntry.m_part.m_id, shopEntry.m_cost));
						flag = true;
					}
					else if (num > 0)
					{
						flag2 = true;
						CareerStatus.Get().MarkEverInInventory(shopEntry.m_part.m_id);
						CareerStatus.Get().GetCalendar().ScheduleDelivery(num, shopEntry.m_part.m_id, shopEntry.m_cost, true);
					}
					else
					{
						flag2 = true;
						PartInstance partInstance = new PartInstance(shopEntry.m_part.m_id, shopEntry.m_cost);
						partInstance.SetNew();
						if (shopEntry.m_part.m_type == PartDesc.Type.CASE)
						{
							if (!WorkshopController.Get().SpawnCase(partInstance))
							{
								CareerStatus.Get().GetCalendar().ScheduleDelivery(1, shopEntry.m_part.m_id, shopEntry.m_cost, true);
								flag3 = true;
							}
						}
						else
						{
							CareerStatus.Get().AddDelivery(partInstance);
						}
					}
				}
			}
			if (flag3)
			{
				CareerStatus.Get().AddEmailMessage("MISSED_DELIVERY", "FROM_POST", string.Empty);
			}
			this.m_trolley.Clear();
			this.UpdateTrolley();
			string text = string.Empty;
			if (flag)
			{
				text = text + ScriptLocalization.ShopApp.UpgradesApplied + ((!flag2) ? string.Empty : "\n\n");
			}
			if (flag2)
			{
				text += this.m_delivery.m_message;
			}
			this.ShowMessage(text);
			this.m_delivery = CareerConstants.s_delivery1;
			return;
		}
		this.ShowMessage(ScriptLocalization.ShopApp.PURCHASE_FAILED);
	}

	// Token: 0x06002337 RID: 9015
	void IShopApp.OnBack()
	{
		if (this.m_returnToCheckout)
		{
			this.m_returnToCheckout = false;
			this.ConstructCheckout();
			return;
		}
		this.ShowItemList();
	}

	// Token: 0x06002338 RID: 9016
	void IShopApp.OnShowItem(ShopEntry item)
	{
		this.ShowItemPage(item);
	}

	// Token: 0x06002339 RID: 9017
	void IShopApp.OnBuyAction(ShopEntry item)
	{
		this.AddItem(item);
	}

	// Token: 0x0600233A RID: 9018
	private void OnStockChange()
	{
		if (this.m_itemList.gameObject.activeSelf)
		{
			this.ConstructItems();
		}
	}

	// Token: 0x040016C0 RID: 5824
	public Transform m_categories;

	// Token: 0x040016C1 RID: 5825
	public ShopCategory m_categoryPrefab;

	// Token: 0x040016C2 RID: 5826
	public Text m_cartPrice;

	// Token: 0x040016C3 RID: 5827
	public ShopItemList m_itemList;

	// Token: 0x040016C4 RID: 5828
	public ScrollRect m_checkoutList;

	// Token: 0x040016C5 RID: 5829
	public CheckoutRow m_checkoutRowPrefab;

	// Token: 0x040016C6 RID: 5830
	public CheckoutDeliveryRow m_checkoutDeliveryRowPrefab;

	// Token: 0x040016C7 RID: 5831
	public CheckoutFinalRow m_checkoutFinalRowPrefab;

	// Token: 0x040016C8 RID: 5832
	public Text m_trolleyContents;

	// Token: 0x040016C9 RID: 5833
	public Text m_location;

	// Token: 0x040016CA RID: 5834
	public Text m_message;

	// Token: 0x040016CB RID: 5835
	public ShopItem m_shopItemPage;

	// Token: 0x040016CC RID: 5836
	public GameObject m_filterOptions;

	// Token: 0x040016CD RID: 5837
	public Dropdown m_sortBy;

	// Token: 0x040016CE RID: 5838
	public Dropdown m_filter;

	// Token: 0x040016CF RID: 5839
	public InputField m_searchInResults;

	// Token: 0x040016D0 RID: 5840
	public InputField m_searchStore;

	// Token: 0x040016D1 RID: 5841
	public Button m_searchButton;

	// Token: 0x040016D2 RID: 5842
	public GameObject m_landingPage;

	// Token: 0x040016D3 RID: 5843
	public ScrollRect m_landingCategories;

	// Token: 0x040016D4 RID: 5844
	public ShopLandingCategory m_landingCategoryPrefab;

	// Token: 0x040016D5 RID: 5845
	public float m_cablesItemHeight;

	// Token: 0x040016D6 RID: 5846
	private bool m_returnToCheckout;

	// Token: 0x040016D7 RID: 5847
	private PartDesc.ShopCategory[] m_shopCategories = new PartDesc.ShopCategory[]
	{
		PartDesc.ShopCategory.GPU,
		PartDesc.ShopCategory.CPU,
		PartDesc.ShopCategory.Motherboard,
		PartDesc.ShopCategory.Memory,
		PartDesc.ShopCategory.Storage,
		PartDesc.ShopCategory.PSU,
		PartDesc.ShopCategory.Case,
		PartDesc.ShopCategory.Cooling,
		PartDesc.ShopCategory.CaseCooling,
		PartDesc.ShopCategory.Cables,
		PartDesc.ShopCategory.Misc
	};

	// Token: 0x040016D8 RID: 5848
	public List<ShopEntry> m_trolley;

	// Token: 0x040016D9 RID: 5849
	public List<Component> m_rows = new List<Component>();

	// Token: 0x040016DA RID: 5850
	private List<ShopEntry> m_partsForSale = new List<ShopEntry>();

	// Token: 0x040016DB RID: 5851
	private CheckoutDeliveryRow m_deliveryRow;

	// Token: 0x040016DC RID: 5852
	private CheckoutFinalRow m_finalRow;

	// Token: 0x040016DD RID: 5853
	private DeliveryOption m_delivery;

	// Token: 0x040016DE RID: 5854
	private int m_cost;

	// Token: 0x040016DF RID: 5855
	private float m_scrollItemDefaultSize;

	// Token: 0x040016E0 RID: 5856
	private bool m_suppressConstruct;

	// Token: 0x040016E1 RID: 5857
	private PartDesc.ShopCategory m_type = PartDesc.ShopCategory.All;

	// Token: 0x040016E2 RID: 5858
	private string m_manufacturer = string.Empty;

	// Token: 0x040016E3 RID: 5859
	private string m_searchString = string.Empty;

	// Token: 0x040016E4 RID: 5860
	private List<KeyValuePair<string, string>> m_currentFilters = new List<KeyValuePair<string, string>>();

	// Token: 0x040016E5 RID: 5861
	private KeyValuePair<string, string> m_currentFilter;

	// Token: 0x020003D7 RID: 983
	private enum SortBy
	{
		// Token: 0x040016E7 RID: 5863
		RELEVANCE,
		// Token: 0x040016E8 RID: 5864
		PRICE_ASCENDING,
		// Token: 0x040016E9 RID: 5865
		PRICE_DESCENDING,
		// Token: 0x040016EA RID: 5866
		COUNT
	}
}
